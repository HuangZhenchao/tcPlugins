当用户在 Total Commander 中安装插件时，会加载插件并调用 FsGetDefRootName，而无需事先调用 FsInit。
返回的名称将保存到 wincmd.ini。
然后插件将被卸载。
当用户进入网上邻居时，Totalcmd 会枚举wincmd.ini 中列出的所有插件，而不加载插件！
只有当用户尝试进入插件根目录时才会加载插件。
用户也有可能通过使用 Totalcmd 中的“目录热列表”或“目录历史”功能直接跳转到插件子目录。
加载插件后，Totalcmd 会尝试获取上述函数的地址。
如果没有实现任何最低限度的功能，插件加载将失败。
如果缺少任何可选功能，加载将成功，但用户将无法使用这些功能（例如删除）。
获取到函数地址后，Totalcmd 会调用 FsInit 来让插件知道它的编号和回调函数地址。
每当用户进入插件文件系统中的任何目录时，框架 (Total Commander) 都会刷新文件列表。
如果框架想要使用子目录，也将执行相同的过程，例如
在用户选择的子目录中复制/移动/删除文件时。
这是通过为树中遇到的每个目录递归调用 FsFindFirst()...FsFindNext()...FsFindClose() 来完成的。
该系统在本文中将被称为 FNC (findfirst-next-close)。
对于插件根目录，Totalcmd 调用 FsFindFirst() 并将参数 Path 设置为“\”。
该插件应返回根目录中的所有项目，例如
远程机器的驱动器号、可用的文件系统等。当返回的项目设置了目录标志时，Totalcmd 将使用该名称构建子目录路径。
子目录是通过连接由反斜杠分隔的返回目录名称来构建的，例如
\drive1\c:\some\subdir
在下载或远程复制整个目录树时，框架执行子目录的完整 FNC 循环并将文件存储在内部列表中。
然后它检查文件列表并复制这些文件，并在第二个循环中检查目录列表，如果遇到它们，它递归地复制子目录。
这允许递归复制整个树。
为了计算子目录中的文件和删除文件，需要多个打开的文件句柄。
因此，您应该在调用 FsFindFirst() 时初始化一个临时结构，将其句柄（指针）返回给框架，并在 FsFindClose() 中使用现在返回给您的相同句柄删除它。
重要的是要知道可能同时有多个打开的查找句柄，尽管要非常小心地避免这种情况。
某些框架函数可能会在需要时调用其他函数——例如，在移动文件期间调用 FsRemoveDir() 以删除不再需要的目录。
以下是您不能依赖 FNC 被调用的一些情况（因为它之前已经被调用过）：
- 复制当前活动目录中的某些文件时，没有选择复制的目录
- 使用 F3 查看文件时
如果实现了 FsStatusInfo，则每次操作开始和结束时都会通知插件。
除了 FsInit 和 FsDisconnect 之外的任何插件函数都不会在没有封闭的 FsStatusInfo 调用对的情况下被调用。
强烈建议从现有插件源开始并对其进行修改，例如
使用非常简单的 fsplugin 示例源。
然后首先执行 FsInit、FsFindFirst、FsFindNext 和 FsFindClose 来浏览你的文件系统。
当这有效时，您可以添加其他功能以添加上传和下载等功能。